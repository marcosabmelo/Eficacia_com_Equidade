#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(tidyverse)
library(ggplot2)
library(shinydashboard)
library(plotly)

#install.packages("htmltools")
#source("data2.R")

#----------------------------------------------------------------------------------------
#
#
# UI
#
#
#----------------------------------------------------------------------------------------
dataset <- diamonds

shinyUI(pageWithSidebar(
  
  headerPanel("Diamonds Explorer"),
  
  sidebarPanel(
    
    sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
                value=min(1000, nrow(dataset)), step=500, round=0),
    
    selectInput('x', 'X', names(dataset)),
    selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
    selectInput('color', 'Color', c('None', names(dataset))),
    
    selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
    selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
  ),
  
  mainPanel(
    graphOutput('trendPlot')
  )
))

#----------------------------------------------------------------------------------------
#
#
# SERVER
#
#
#----------------------------------------------------------------------------------------
#Shiny
shinyServer(function(input, output, session) {
  
  #add reactive data information. Dataset = built in diamonds data
  dataset <- reactive({
    diamonds[sample(nrow(diamonds), input$sampleSize),]
  })
  
  output$trendPlot <- renderGraph({
    
    # build graph with ggplot syntax
    # pull x and y variable info
    p <- ggplot(dataset(),
                aes_string(x = input$x,
                           y = input$y)) +
      geom_point()
    
    # if statements for possible color/facet row/facet column variables
    if (input$color != 'None')
      p <- p + aes_string(color=input$color)
    
    facets <- paste(input$facet_row, '~', input$facet_col)
    if (facets != '. ~ .')
      p <- p + facet_grid(facets)
    
    # use gg2list() to convert from ggplot->plotly
    gg <- gg2list(p)
    
    # make edits with plotly syntax
    gg$layout <- list(legend = list(
      x = 1,
      y = 1,
      bgcolor = "transparent"))
    
    # Send this message up to the browser client, which will get fed through to
    # Plotly's javascript graphing library embedded inside the graph
    return(list(
      list(
        id = "trendPlot",
        task = "newPlot",
        data = gg$data,
        layout= gg$layout
      )
    ))
    
  })
  
})

# Run the application 
shinyApp(ui = ui, server = server)
